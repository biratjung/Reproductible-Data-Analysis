ggtitle("Number of Space Launches per Year")
launch_plot
# Create a plot
price_plot <- ggplot(data = data, aes(x = Year, y = Price)) +
geom_point()+
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(Price, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# Create a plot
price_plot <- ggplot(data = prices, aes(x = year, y = mean_price)) +
geom_point()+
geom_segment(aes(xend=c(tail(year, n=-1), NA),
yend=c(tail(count, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# Create a plot
price_plot <- ggplot(data = prices, aes(x = year, y = mean_price)) +
geom_point()+
geom_segment(aes(xend=c(tail(year, n=1), NA),
yend=c(tail(count, n=1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# plot launches per year
launch_plot <- ggplot(launches_per_year, aes(x = Year, y = count)) +
geom_point() +
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(count, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
xlab("Year") +
ylab("Number of Launches") +
ggtitle("Number of Space Launches per Year")
launch_plot
# plot launches per year
launch_plot <- ggplot(launches_per_year, aes(x = Year, y = count)) +
geom_point() +
geom_segment(aes(xend=c(tail(Year, n=1), NA),
yend=c(tail(count, n=1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
xlab("Year") +
ylab("Number of Launches") +
ggtitle("Number of Space Launches per Year")
launch_plot
-
# plot launches per year
launch_plot <- ggplot(launches_per_year, aes(x = Year, y = count)) +
geom_point() +
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(count, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
xlab("Year") +
ylab("Number of Launches") +
ggtitle("Number of Space Launches per Year")
# plot launches per year
launch_plot <- ggplot(launches_per_year, aes(x = Year, y = count)) +
geom_point() +
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(count, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
xlab("Year") +
ylab("Number of Launches") +
ggtitle("Number of Space Launches per Year")
launch_plot
data <- read.csv("mission_launches.csv")
data
#importing libraries
library(tidyr)
library(tidyverse)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
data = subset(data, select = -c(X, Unnamed..0) )
data
#getting the last part of the column Location and putting in the Country column
data$Country <- str_extract(data$Location, ",\\s*([A-Za-z ]+)$")
#removing the , from the column Country
data$Country <- sub("^\\S+\\s+", "", data$Country)
#getting center
data$Center <- gsub(".*?,\\s*(.*?),.*", "\\1", data$Location)
#rearranging the dataset
data <- data[,c("Organisation", "Country","Center", "Date", "Detail", "Rocket_Status","Price","Mission_Status", "Location")]
data
#remove UTC from date
data$Date <- gsub("UTC", "", data$Date)
#converting date into date format
data$Date <- strptime(data$Date, "%a %b %d, %Y %H:%M")
#getting the year of each mission in a separate column
data$Year <- format(data$Date, "%Y")
#rearranging the dataset
data <- data[,c("Organisation", "Country", "Center", "Year", "Detail", "Rocket_Status","Price","Mission_Status","Location", "Date")]
data
#separating Detail into Rocket and Satellite
data <- separate(data, Detail, into = c("Rocket", "Satellite"), sep = "\\|")
data
#getting generic rocket name
data$Rocket <- word(data$Rocket, 1)
data
#converting Price in numeric
data$Price <- as.numeric(data$Price)
str(data$Price)
#NAs
na_count <-sapply(data, function(y) sum(length(which(is.na(y)))))
na_count
#removing the rows with null date values
data <- data[!is.na(data$Year),]
#NAs
na_count <-sapply(data, function(y) sum(length(which(is.na(y)))))
na_count
# Find unique rocket models
rocket_models <- unique(data$Rocket)
# Loop over each rocket model
for (model in rocket_models) {
# Find the mean price of the model where price is not null
mean_price <- mean(data$Price[data$Rocket == model & !is.na(data$Price)], na.rm = TRUE)
# Impute missing prices for the model using the mean price
data$Price[data$Rocket == model & is.na(data$Price)] <- mean_price
}
#NAs
na_count <-sapply(data, function(y) sum(length(which(is.na(y)))))
na_count
# Aggregate data by organisation, year and non-missing price
aggregate_df <- aggregate(data$Price, by=list(Org=data$Organisation, Year=data$Year, Model=data$Rocket), FUN=function(x) {
if (!all(is.na(x))) {
mean(x, na.rm=TRUE)
} else {
NA
}
})
# Compute total cost and number of launches per organisation and year
total_cost <- tapply(aggregate_df$x, INDEX=list(aggregate_df$Org, aggregate_df$Year), FUN=sum, na.rm=TRUE)
n_launches <- tapply(aggregate_df$x, INDEX=list(aggregate_df$Org, aggregate_df$Year), FUN=length)
# Compute average cost per year per organisation using dictionary comprehension
avg_cost <- c()
for (org in unique(aggregate_df$Org)) {
for (year in unique(data$Year)) {
if (is.na(total_cost[org, year])) {
next
}
n <- n_launches[org, year]
cost <- total_cost[org, year]
avg_cost[[paste(org, year, sep="_")]] <- cost/n
}
}
# Impute missing prices using average cost per year per organisation
missing_price <- is.na(data$Price)
for (i in which(missing_price)) {
key <- paste(data$Organisation[i], data$Year[i], sep="_")
if (key %in% names(avg_cost)) {
data$Price[i] <- avg_cost[[key]]
}
}
#NAs
na_count <-sapply(data, function(y) sum(length(which(is.na(y)))))
na_count
data
#removing location and date
data = subset(data, select = -c(Location, Date) )
data
# calculate number of launches per year
launches_per_year <- data %>%
group_by(Year) %>%
summarize(count = n()) %>%
ungroup()
# plot launches per year
launch_plot <- ggplot(launches_per_year, aes(x = Year, y = count)) +
geom_point() +
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(count, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
xlab("Year") +
ylab("Number of Launches") +
ggtitle("Number of Space Launches per Year")
launch_plot
# Group by year and get minimum, mean, and maximum prices
prices <- data %>%
filter(!is.na(Price)) %>%
group_by(year = Year) %>%
summarise(min_price = min(Price),
mean_price = mean(Price),
max_price = max(Price))
View(data)
# Create a plot
price_plot <- ggplot(data = prices, aes(x = year, y = mean_price)) +
geom_point()+
geom_line() +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# Create a plot
price_plot <- ggplot(data = prices, aes(x = Year, y = mean_price)) +
geom_point()+
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(mean_price, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# Create a plot
price_plot <- ggplot(data = prices, aes(x = Year, y = mean_price)) +
geom_point()+
geom_segment(aes(xend=c(tail(year, n=-1), NA),
yend=c(tail(mean_price, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# Group by year and get minimum, mean, and maximum prices
prices <- data %>%
filter(!is.na(Price)) %>%
group_by(Year) %>%
summarise(min_price = min(Price),
mean_price = mean(Price),
max_price = max(Price))
View(data)
prices
launches_per_year
prices
# Create a plot
price_plot <- ggplot(data = prices, aes(x = Year, y = mean_price)) +
geom_point()+
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(mean_price, n=-1), NA))) +
scale_x_discrete(breaks = seq(1950, 2020, by = 10)) +
labs(x = "Year", y = "Price of Rocket Launch",
title = "International Space Launch Pricing trends") +
scale_y_log10()
price_plot
# group by country and calculate total missions and success rate
country_stats <- data %>%
group_by(Country) %>%
summarize(total_missions = n(),
success_rate = sum(Mission_Status=="Success") / total_missions)
country_stats
# sort by success rate in descending order and keep top 5 countries
top_countries <- country_stats %>%
arrange(desc(success_rate)) %>%
head(5)
top_countries
# sort by success rate in descending order and keep top 5 countries
top_countries <- country_stats %>%
arrange(desc(success_rate)) %>%
tail(5)
top_countries
# filter the space data to only include the top countries
top_missions <- data %>%
filter(Country %in% top_countries$Country)
# group by year and country and calculate number of missions
missions_by_year <- top_missions %>%
group_by(Year, Country) %>%
summarize(total_missions = n())
missions_by_year
# plot a line graph of total missions by year for each top country
ggplot(missions_by_year, aes(x=Year, y=total_missions, color=Country)) +
geom_line() +
labs(x="Year", y="Total Missions", color="Country") +
scale_x_discrete(breaks=seq(1950, 2020, by=10))
# plot a line graph of total missions by year for each top country
ggplot(missions_by_year, aes(x=Year, y=total_missions, color=Country)) +
geom_point()+
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(total_missions, n=-1), NA))) +
labs(x="Year", y="Total Missions", color="Country") +
scale_x_discrete(breaks=seq(1950, 2020, by=10))
# group the data by country and count the number of missions
missions_by_country <- data %>%
filter(Year >= 1957) %>%
group_by(Country) %>%
summarise(total_missions = n(), success_rate = mean(`Status Rocket` == "StatusRetired")) %>%
ungroup()
# group the data by country and count the number of missions
missions_by_country <- data %>%
filter(Year >= 1957) %>%
group_by(Country) %>%
summarise(total_missions = n(), success_rate = mean(`Rocket_Status` == "StatusRetired")) %>%
ungroup()
missions_by_country
# get top 5 countries based on the number of missions
top_countries <- missions_by_country %>%
arrange(desc(total_missions)) %>%
head(5) %>%
pull(Country)
top_countries
# filter the data to include only the top 5 countries
top_countries_data <- data %>%
filter(Country %in% top_countries) %>%
group_by(Country, Year) %>%
summarise(total_missions = n(), success_rate = mean(`Rocket_Status` == "StatusRetired")) %>%
ungroup()
# filter the data to include only the top 5 countries
top_countries_data <- data %>%
filter(Country %in% top_countries) %>%
.groups = c("Country", "Year") %>%
summarise(total_missions = n(), success_rate = mean(`Rocket_Status` == "StatusRetired")) %>%
ungroup()
# filter the data to include only the top 5 countries
top_countries_data <- data %>%
filter(Country %in% top_countries) %>%
group_by(Country, Year) %>%
summarise(total_missions = n(), success_rate = mean(`Rocket_Status` == "StatusRetired"), .groups = "drop") %>%
ungroup()
top_countries_data
# plot the data
ggplot(top_countries_data, aes(x = Year, y = total_missions, color = Country)) +
geom_line() +
scale_color_brewer(palette = "Set1") +
labs(x = "Year", y = "Number of missions", title = "Top 5 countries based on the number of missions undertaken")
# plot the data
ggplot(top_countries_data, aes(x = Year, y = total_missions, color = Country)) +
geom_point()+
geom_segment(aes(xend=c(tail(Year, n=-1), NA),
yend=c(tail(total_missions, n=-1), NA))) +
scale_x_discrete(breaks=seq(1950, 2020, by=10))
nrow(data[data$Price == 0, ])
nrow(data[data$Price == 0, ])
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("D:/1111111/2nd sem/Applied Data Analysis in Sports/final_assessment")
# list all CSV files in the directory
csv_files <- list.files(pattern = ".csv")
# create an empty list to store data frames
df_list <- list()
df <- read.csv("/data",file)
# loop through each CSV file and read it into a data frame
for (file in csv_files) {
df <- read.csv("/data",file)
# add the data frame to the list
df_list[[file]] <- df
}
# Get a list of all CSV files in the directory
my_files <- list.files(path = "/data", pattern = "*.csv", full.names = TRUE)
# Loop through each CSV file, read it into R, and bind them into a single data frame
my_data <- lapply(my_files, read.csv)
my_data <- do.call(rbind, my_data)
my_data
# list all CSV files in the directory
csv_files <- list.files(path = '/data', pattern = ".csv", full.names = TRUE)
# create an empty list to store data frames
df_list <- list()
# loop through each CSV file and read it into a data frame
for (file in csv_files) {
df <- read.csv(file)
# add the data frame to the list
df_list[[file]] <- df
}
# Get a list of all CSV files in the directory
my_files <- list.files(path = "data/", pattern = "*.csv", full.names = TRUE)
# Loop through each CSV file, read it into R, and bind them into a single data frame
my_data <- lapply(my_files, read.csv)
my_data <- do.call(rbind, my_data)
# list all CSV files in the directory
csv_files <- list.files(path = 'data/', pattern = ".csv", full.names = TRUE)
# create an empty list to store data frames
df_list <- list()
# loop through each CSV file and read it into a data frame
for (file in csv_files) {
df <- read.csv(file)
# add the data frame to the list
df_list[[file]] <- df
}
# Set the path to the directory containing the CSV files
path <- "data/"
# Get a list of all CSV files in the directory
file_list <- list.files(path, pattern = ".csv", full.names = TRUE)
# Create an empty list to hold the data frames
df_list <- list()
# Loop through each file, read it in, and assign it to a new data frame
for (i in 1:length(file_list)) {
df_name <- gsub(".csv", "", basename(file_list[i]))  # Get the file name without the ".csv" extension
df <- read.csv(file_list[i], header = TRUE)  # Read in the file
df_list[[df_name]] <- df  # Assign the data frame to a list with the file name as the list name
}
df_list[["file1"]]
salary <- read.csv(path= 'data/2018-19_nba_player-salaries.csv')
salary <- read.csv('data/2018-19_nba_player-salaries.csv')
salary <- read.csv('data/2018-19_nba_player-salaries.csv')
salary
payroll <- read.csv('2019-20_nba_team-payroll.csv')
payroll <- read.csv('data/2019-20_nba_team-payroll.csv')
statistics <- read.csv('data/2018-19_nba_player-statistics.csv')
statistics1 <- read.csv('data/2018-19_nba_player-statistics_1.csv')
team_statistics1 <- read.csv('data/2018-19_nba_team-statistics_1.csv')
team_statistics2<- read.csv('data/2018-19_nba_team-statistics_1.csv')
payroll
salary
salary <- read.csv('data/2018-19_nba_player-salaries.csv')
salary
payroll
statistics
team_statistics1
team_statistics2
payroll
payroll
salary
payroll
statistics
team_statistics1
team_statistics2
statistics
#Cleaning the datasets
sum(is.na(statistics))
sum(is.na(payroll))
sum(is.na(salary))
sum(is.na(team_statistics1))
sum(is.na(team_statistics2))
#Cleaning the datasets
sum(is.na(statistics))
statistics
payroll
abb <- read.table('data/', sep = '-')
abb <- read.table('data/', sep = '-', header = TRUE)
abb <- read.table('data/abb.txt', sep = '-', header = TRUE)
abb
abb <- read.table('data/abb.txt', sep = '\t&-', header = TRUE)
abb <- read.table('data/abb.txt', sep = '\t', header = TRUE)
abb
library("readxl")
# xls files
abbs <- read_excel("data/abb.xlsx")
abbs
library(stringr)
library(dplyr)
payroll
salary
payroll
abbs
paryoll$team <- paryoll$team %>%
str_to_lower() %>%
str_replace_all("[^[:alnum:]]", "")
payroll$team <- payroll$team %>%
str_to_lower() %>%
str_replace_all("[^[:alnum:]]", "")
abbs$Teams <- abbs$Teams %>%
str_to_lower() %>%
str_replace_all("[^[:alnum:]]", "")
team <- left_join(payroll, abbs, by = c("Teams" = "team"))
abbs$Teams
payroll$team
payroll <- merge(payroll, abbs, by.x = "team", by.y = "Teams", all.x = TRUE)
payroll
team
abbs
salary <- read.csv('data/2018-19_nba_player-salaries.csv')
payroll <- read.csv('data/2019-20_nba_team-payroll.csv')
statistics <- read.csv('data/2018-19_nba_player-statistics.csv')
team_statistics1 <- read.csv('data/2018-19_nba_team-statistics_1.csv')
team_statistics2<- read.csv('data/2018-19_nba_team-statistics_1.csv')
sum(is.na(statistics))
sum(is.na(team_statistics2))
# xls files
abbs <- read_excel("data/abb.xlsx")
library(stringr)
library(dplyr)
team <- left_join(payroll, abbs, by = c("Teams" = "team"))
payroll <- merge(payroll, abbs, by.x = "team", by.y = "Teams", all.x = TRUE)
payroll
abbs
payroll
sum(is.na(statistics))
salary <- read.csv('data/2018-19_nba_player-salaries.csv')
payroll <- read.csv('data/2019-20_nba_team-payroll.csv')
statistics <- read.csv('data/2018-19_nba_player-statistics.csv')
team_statistics1 <- read.csv('data/2018-19_nba_team-statistics_1.csv')
team_statistics2<- read.csv('data/2018-19_nba_team-statistics_1.csv')
sum(is.na(statistics))
sum(is.na(team_statistics2))
statistics
sum(is.na(statistics))
statistics
na_count <-sapply(statistics, function(y) sum(length(which(is.na(y)))))
na_count
na_count <-sapply(team_statistics2, function(y) sum(length(which(is.na(y)))))
na_count
team_statistics2$X <- NULL
na_count
team_statistics2$X.1 <- NULL
team_statistics2$X.2 <- NULL
na_count <-sapply(team_statistics2, function(y) sum(length(which(is.na(y)))))
na_count
#Removing NAs
na_count <-sapply(team_statistics1, function(y) sum(length(which(is.na(y)))))
na_count
team_statistics1$X <- NULL
team_statistics1$X.1 <- NULL
team_statistics1$X.2 <- NULL
#Removing NAs
na_count <-sapply(team_statistics1, function(y) sum(length(which(is.na(y)))))
na_count
#Checking for null values
na_count <-sapply(statistics, function(y) sum(length(which(is.na(y)))))
na_count
statistics$player_name
statistics
dplyr::filter(statistics, player_name %in% c("Alex Abrines"))
statistics
dplyr::filter(statistics, player_name %in% c("Quincy Acy"))
statistics
dplyr::filter(statistics, player_name %in% c("Ivica Zubac"))
